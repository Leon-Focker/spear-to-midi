;; * main

(in-package :spear-to-midi)

;; ** spear-to-audio
;;; Convert the partial data from a text file that was generated by SPEAR into
;;; midi files.
;;;
;;; - input-file: The path to the .txt file that stores the partial data.
;;; - output-file: The path to the output file (.mid extension). Can be relative
;;;   (to the input-file) or absolute.
;;; - velocity-skew: The power for this equation, where velocities are between
;;;   0 and 1: (expt vel power).
;;; - vel-range: A List of two numbers, all velocitites for which the following
;;;   isn't true are discarded: (<= vel-range.0 vel vel-range.1)
;;; - average-partials: Normally one SPEAR-partial (which can be rather long and
;;;   go up and down, i.e. is not just one frequency bin) will generate one midi
;;;   note by calculating the averages of all the timepoints in this partial.
;;;   When this is nil, make each time-point into its own midi-note. This can
;;;   easily generate a LOT of notes, so be careful with this!
;;; - bpm: The Tempo at which you have to play the midi file back for it to
;;;   match the original audio.
;;;
;;; EXAMPLE
#|
(spear-to-midi
 "/C/.../Desktop/vr_rechts.txt"
 "/E/midi/vr_rechts.mid"
 0.25
 '(0.0  0.8))
|#
(defun spear-to-midi (input-file
		      &optional
			(output-file "output.mid")
			(velocity-skew 1)
			(vel-range '(0.0 1.0))
			(average-partials t)
			(bpm 60))
  ;; Set beat resolution: Pulses (ticks) per quarter note. Normally 480.
  (let ((file (if (probe-file (directory-namestring output-file)) output-file
		  (get-pathname-dir input-file output-file)))
	(lines '())
	(partials '())
	(events '()))
    (format t "~&--- SPEAR to MIDI ---")
    (format t "~&Reading file...")
    (with-open-file (f input-file :direction :input)
      (setf lines (loop for line = (read-line f nil nil)
                        while line
			;; Data lines are 57 characters or longer.
                        when (>= (length line) 57) collect line)))
    ;; get partial-data from lines
    (format t "~&Getting Partial Data...")
    (loop for line in lines
	  do (push (process-line line) partials))
    ;; loop through partials
    (if (null partials)
	(format t "~&No partial data found in ~a!" input-file)
	(setf events (partials-to-events partials average-partials velocity-skew vel-range)))
    ;; Call to lists-to-midi
    (format t "~&Generating Midi File...")
    (events-to-midi events :tempo bpm :file file)
    (format t "~&Done")
    file))

;; EOF spear-to-midi.lsp
